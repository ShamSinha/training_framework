# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/networks/03_fpn.ipynb.

# %% auto 0
__all__ = ['BackbonewithFPN3D', 'resnet_fpn3d_feature_extractor']

# %% ../../nbs/networks/03_fpn.ipynb 1
import torch.nn as nn
import torchvision
import fastcore.all as fc
from typing import Dict, List
from monai.networks.blocks.feature_pyramid_network import FeaturePyramidNetwork, LastLevelMaxPool

# %% ../../nbs/networks/03_fpn.ipynb 11
class BackbonewithFPN3D(nn.Module):
    def __init__(self, backbone, return_layers: Dict[str, str], in_channels_list: List[int],\
                 out_channels: int, extra_blocks: bool=False):
        super().__init__()
        fc.store_attr(names=["return_layers", "in_channels_list", "out_channels"])
        self.body = torchvision.models._utils.IntermediateLayerGetter(backbone, return_layers=return_layers)
        self.fpn = FeaturePyramidNetwork( 
            spatial_dims=3, 
            in_channels_list=in_channels_list,
            out_channels=out_channels,
            extra_blocks=LastLevelMaxPool(3) if extra_blocks else None,
        )
        
    def forward(self, x):
        x = self.body(x)
        y = self.fpn(x)
        return y

# %% ../../nbs/networks/03_fpn.ipynb 12
def resnet_fpn3d_feature_extractor(backbone, out_channels=256, returned_layers=[1, 2, 3], extra_blocks:bool=False):
    in_channels_stage2 = backbone.ip[-1] // 8
    in_channels_list = [in_channels_stage2 * 2 ** (i - 1) for i in returned_layers]
    return_layers = {f"layer{k}": str(v) for v, k in enumerate(returned_layers)}
    return BackbonewithFPN3D(backbone, return_layers, in_channels_list, out_channels, extra_blocks)
