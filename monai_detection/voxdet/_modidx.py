# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/qct_nodule_detection',
                'doc_host': 'https://qureai.github.io',
                'git_url': 'https://github.com/qureai/qct_nodule_detection',
                'lib_path': 'voxdet'},
  'syms': { 'voxdet.activations': { 'voxdet.activations.GeneralRelu': ('activations.html#generalrelu', 'voxdet/activations.py'),
                                    'voxdet.activations.GeneralRelu.__init__': ( 'activations.html#generalrelu.__init__',
                                                                                 'voxdet/activations.py'),
                                    'voxdet.activations.GeneralRelu.__repr__': ( 'activations.html#generalrelu.__repr__',
                                                                                 'voxdet/activations.py'),
                                    'voxdet.activations.GeneralRelu.forward': ( 'activations.html#generalrelu.forward',
                                                                                'voxdet/activations.py')},
            'voxdet.anchors': { 'voxdet.anchors.AnchorGeneratorBasedonStride': ( 'anchors.html#anchorgeneratorbasedonstride',
                                                                                 'voxdet/anchors.py'),
                                'voxdet.anchors.AnchorGeneratorBasedonStride.__init__': ( 'anchors.html#anchorgeneratorbasedonstride.__init__',
                                                                                          'voxdet/anchors.py')},
            'voxdet.apps.lung_seg.infer': {},
            'voxdet.apps.lung_seg.resunet': {},
            'voxdet.apps.lung_seg.utils': {},
            'voxdet.bbox_func.bbox_iou': { 'voxdet.bbox_func.bbox_iou._upcast': ( 'bbox_func/bbox_iou.html#_upcast',
                                                                                  'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.bbox_area': ( 'bbox_func/bbox_iou.html#bbox_area',
                                                                                    'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.cal_diou': ( 'bbox_func/bbox_iou.html#cal_diou',
                                                                                   'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.cal_diou_pair': ( 'bbox_func/bbox_iou.html#cal_diou_pair',
                                                                                        'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.cal_giou_pair': ( 'bbox_func/bbox_iou.html#cal_giou_pair',
                                                                                        'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.calculate_iou_numpy': ( 'bbox_func/bbox_iou.html#calculate_iou_numpy',
                                                                                              'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.calculate_iou_pair': ( 'bbox_func/bbox_iou.html#calculate_iou_pair',
                                                                                             'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.calculate_iou_torch': ( 'bbox_func/bbox_iou.html#calculate_iou_torch',
                                                                                              'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.check_2d_3d': ( 'bbox_func/bbox_iou.html#check_2d_3d',
                                                                                      'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.intersection_area': ( 'bbox_func/bbox_iou.html#intersection_area',
                                                                                            'voxdet/bbox_func/bbox_iou.py'),
                                           'voxdet.bbox_func.bbox_iou.intersection_area_pair': ( 'bbox_func/bbox_iou.html#intersection_area_pair',
                                                                                                 'voxdet/bbox_func/bbox_iou.py')},
            'voxdet.bbox_func.nms': {'voxdet.bbox_func.nms.monai_nms': ('bbox_func/nms.html#monai_nms', 'voxdet/bbox_func/nms.py')},
            'voxdet.bbox_func.reg_loss': { 'voxdet.bbox_func.reg_loss.LossReduction': ( 'bbox_func/reg_loss.html#lossreduction',
                                                                                        'voxdet/bbox_func/reg_loss.py'),
                                           'voxdet.bbox_func.reg_loss.RegLoss': ( 'bbox_func/reg_loss.html#regloss',
                                                                                  'voxdet/bbox_func/reg_loss.py'),
                                           'voxdet.bbox_func.reg_loss.RegLoss.__init__': ( 'bbox_func/reg_loss.html#regloss.__init__',
                                                                                           'voxdet/bbox_func/reg_loss.py'),
                                           'voxdet.bbox_func.reg_loss.RegLoss._reduce': ( 'bbox_func/reg_loss.html#regloss._reduce',
                                                                                          'voxdet/bbox_func/reg_loss.py'),
                                           'voxdet.bbox_func.reg_loss.RegLoss.forward': ( 'bbox_func/reg_loss.html#regloss.forward',
                                                                                          'voxdet/bbox_func/reg_loss.py'),
                                           'voxdet.bbox_func.reg_loss.StrEnum': ( 'bbox_func/reg_loss.html#strenum',
                                                                                  'voxdet/bbox_func/reg_loss.py'),
                                           'voxdet.bbox_func.reg_loss.StrEnum.__repr__': ( 'bbox_func/reg_loss.html#strenum.__repr__',
                                                                                           'voxdet/bbox_func/reg_loss.py'),
                                           'voxdet.bbox_func.reg_loss.StrEnum.__str__': ( 'bbox_func/reg_loss.html#strenum.__str__',
                                                                                          'voxdet/bbox_func/reg_loss.py')},
            'voxdet.callbacks': {},
            'voxdet.create_ds': { 'voxdet.create_ds.ctscan2dict': ('create_safetensors.html#ctscan2dict', 'voxdet/create_ds.py'),
                                  'voxdet.create_ds.fixed_cache_transforms': ( 'create_safetensors.html#fixed_cache_transforms',
                                                                               'voxdet/create_ds.py'),
                                  'voxdet.create_ds.generate_cache': ('create_safetensors.html#generate_cache', 'voxdet/create_ds.py')},
            'voxdet.hydra_logging_utils.instantiators': {},
            'voxdet.hydra_logging_utils.logging_utils': {},
            'voxdet.hydra_logging_utils.pylogger': {},
            'voxdet.hydra_logging_utils.rich_utils': {},
            'voxdet.hydra_logging_utils.utils': {},
            'voxdet.infer': { 'voxdet.infer.RetinaInfer': ('retina_infer.html#retinainfer', 'voxdet/infer.py'),
                              'voxdet.infer.RetinaInfer.__call__': ('retina_infer.html#retinainfer.__call__', 'voxdet/infer.py'),
                              'voxdet.infer.RetinaInfer.__init__': ('retina_infer.html#retinainfer.__init__', 'voxdet/infer.py'),
                              'voxdet.infer.RetinaInfer.reverse_apply': ('retina_infer.html#retinainfer.reverse_apply', 'voxdet/infer.py'),
                              'voxdet.infer.load_model': ('retina_infer.html#load_model', 'voxdet/infer.py'),
                              'voxdet.infer.subset_cfg_for_infer': ('retina_infer.html#subset_cfg_for_infer', 'voxdet/infer.py')},
            'voxdet.loss': {},
            'voxdet.metrics.det_metrics': { 'voxdet.metrics.det_metrics.DetMetrics': ( 'metrics/det_metrics.html#detmetrics',
                                                                                       'voxdet/metrics/det_metrics.py'),
                                            'voxdet.metrics.det_metrics.DetMetrics.__init__': ( 'metrics/det_metrics.html#detmetrics.__init__',
                                                                                                'voxdet/metrics/det_metrics.py'),
                                            'voxdet.metrics.det_metrics.DetMetrics.compute': ( 'metrics/det_metrics.html#detmetrics.compute',
                                                                                               'voxdet/metrics/det_metrics.py'),
                                            'voxdet.metrics.det_metrics.DetMetrics.update': ( 'metrics/det_metrics.html#detmetrics.update',
                                                                                              'voxdet/metrics/det_metrics.py'),
                                            'voxdet.metrics.det_metrics.assign_tp_fp_fn_linear_assignment': ( 'metrics/det_metrics.html#assign_tp_fp_fn_linear_assignment',
                                                                                                              'voxdet/metrics/det_metrics.py')},
            'voxdet.metrics.sub_level_analysis': { 'voxdet.metrics.sub_level_analysis.compute_metrics_from_cache': ( 'metrics/sub_level_metrics.html#compute_metrics_from_cache',
                                                                                                                     'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.convert2df': ( 'metrics/sub_level_metrics.html#convert2df',
                                                                                                     'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.cuboid_volume': ( 'metrics/sub_level_metrics.html#cuboid_volume',
                                                                                                        'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.cuboid_volume_subset': ( 'metrics/sub_level_metrics.html#cuboid_volume_subset',
                                                                                                               'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.get_all_file_locs': ( 'metrics/sub_level_metrics.html#get_all_file_locs',
                                                                                                            'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.get_dataset_stats': ( 'metrics/sub_level_metrics.html#get_dataset_stats',
                                                                                                            'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.get_dataset_summary': ( 'metrics/sub_level_metrics.html#get_dataset_summary',
                                                                                                              'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.get_scan_stats': ( 'metrics/sub_level_metrics.html#get_scan_stats',
                                                                                                         'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.texture_callback': ( 'metrics/sub_level_metrics.html#texture_callback',
                                                                                                           'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.texture_subset': ( 'metrics/sub_level_metrics.html#texture_subset',
                                                                                                         'voxdet/metrics/sub_level_analysis.py'),
                                                   'voxdet.metrics.sub_level_analysis.volume_callback': ( 'metrics/sub_level_metrics.html#volume_callback',
                                                                                                          'voxdet/metrics/sub_level_analysis.py')},
            'voxdet.networks.convnext': { 'voxdet.networks.convnext.ConvNext': ( 'networks/convnext.html#convnext',
                                                                                 'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.ConvNext.__init__': ( 'networks/convnext.html#convnext.__init__',
                                                                                          'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.ConvNext.forward': ( 'networks/convnext.html#convnext.forward',
                                                                                         'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.ConvNextBlock': ( 'networks/convnext.html#convnextblock',
                                                                                      'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.ConvNextBlock.__init__': ( 'networks/convnext.html#convnextblock.__init__',
                                                                                               'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.ConvNextBlock.forward': ( 'networks/convnext.html#convnextblock.forward',
                                                                                              'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.ConvNextStage': ( 'networks/convnext.html#convnextstage',
                                                                                      'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.ConvNextStage.__init__': ( 'networks/convnext.html#convnextstage.__init__',
                                                                                               'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.ConvNextStage.forward': ( 'networks/convnext.html#convnextstage.forward',
                                                                                              'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.DropPath': ( 'networks/convnext.html#droppath',
                                                                                 'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.DropPath.__init__': ( 'networks/convnext.html#droppath.__init__',
                                                                                          'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.DropPath.forward': ( 'networks/convnext.html#droppath.forward',
                                                                                         'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.LayerNorm3d': ( 'networks/convnext.html#layernorm3d',
                                                                                    'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.LayerNorm3d.__init__': ( 'networks/convnext.html#layernorm3d.__init__',
                                                                                             'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.LayerNorm3d.forward': ( 'networks/convnext.html#layernorm3d.forward',
                                                                                            'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.convnext10': ( 'networks/convnext.html#convnext10',
                                                                                   'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.convnext18': ( 'networks/convnext.html#convnext18',
                                                                                   'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.convnext50': ( 'networks/convnext.html#convnext50',
                                                                                   'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.convnext_fpn3d_feature_extractor': ( 'networks/convnext.html#convnext_fpn3d_feature_extractor',
                                                                                                         'voxdet/networks/convnext.py'),
                                          'voxdet.networks.convnext.drop_path': ( 'networks/convnext.html#drop_path',
                                                                                  'voxdet/networks/convnext.py')},
            'voxdet.networks.convnextv2': { 'voxdet.networks.convnextv2.ConvNextV2BackbonewithFPN3D': ( 'networks/convnextv2.html#convnextv2backbonewithfpn3d',
                                                                                                        'voxdet/networks/convnextv2.py'),
                                            'voxdet.networks.convnextv2.ConvNextV2BackbonewithFPN3D.__init__': ( 'networks/convnextv2.html#convnextv2backbonewithfpn3d.__init__',
                                                                                                                 'voxdet/networks/convnextv2.py'),
                                            'voxdet.networks.convnextv2.ConvNextV2BackbonewithFPN3D.forward': ( 'networks/convnextv2.html#convnextv2backbonewithfpn3d.forward',
                                                                                                                'voxdet/networks/convnextv2.py')},
            'voxdet.networks.fpn': { 'voxdet.networks.fpn.BackbonewithFPN3D': ( 'networks/fpn.html#backbonewithfpn3d',
                                                                                'voxdet/networks/fpn.py'),
                                     'voxdet.networks.fpn.BackbonewithFPN3D.__init__': ( 'networks/fpn.html#backbonewithfpn3d.__init__',
                                                                                         'voxdet/networks/fpn.py'),
                                     'voxdet.networks.fpn.BackbonewithFPN3D.forward': ( 'networks/fpn.html#backbonewithfpn3d.forward',
                                                                                        'voxdet/networks/fpn.py'),
                                     'voxdet.networks.fpn.resnet_fpn3d_feature_extractor': ( 'networks/fpn.html#resnet_fpn3d_feature_extractor',
                                                                                             'voxdet/networks/fpn.py')},
            'voxdet.networks.monai_retina3d': { 'voxdet.networks.monai_retina3d._get_retina_model': ( 'networks/retinanet.html#_get_retina_model',
                                                                                                      'voxdet/networks/monai_retina3d.py'),
                                                'voxdet.networks.monai_retina3d.retina_detector': ( 'networks/retinanet.html#retina_detector',
                                                                                                    'voxdet/networks/monai_retina3d.py')},
            'voxdet.networks.res_se_net': { 'voxdet.networks.res_se_net.ResBlock': ( 'networks/res_se_net.html#resblock',
                                                                                     'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.ResBlock.__init__': ( 'networks/res_se_net.html#resblock.__init__',
                                                                                              'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.ResBlock.forward': ( 'networks/res_se_net.html#resblock.forward',
                                                                                             'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.ResNet': ( 'networks/res_se_net.html#resnet',
                                                                                   'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.ResNet.__init__': ( 'networks/res_se_net.html#resnet.__init__',
                                                                                            'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.ResNet.forward': ( 'networks/res_se_net.html#resnet.forward',
                                                                                           'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.ResStage': ( 'networks/res_se_net.html#resstage',
                                                                                     'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.ResStage.__init__': ( 'networks/res_se_net.html#resstage.__init__',
                                                                                              'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.ResStage.forward': ( 'networks/res_se_net.html#resstage.forward',
                                                                                             'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net._conv3d_block': ( 'networks/res_se_net.html#_conv3d_block',
                                                                                          'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net._conv3d_bottleneck': ( 'networks/res_se_net.html#_conv3d_bottleneck',
                                                                                               'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.conv3d': ( 'networks/res_se_net.html#conv3d',
                                                                                   'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.kaiming_init_weights': ( 'networks/res_se_net.html#kaiming_init_weights',
                                                                                                 'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.resnet10': ( 'networks/res_se_net.html#resnet10',
                                                                                     'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.resnet18': ( 'networks/res_se_net.html#resnet18',
                                                                                     'voxdet/networks/res_se_net.py'),
                                            'voxdet.networks.res_se_net.resnet50': ( 'networks/res_se_net.html#resnet50',
                                                                                     'voxdet/networks/res_se_net.py')},
            'voxdet.networks.selfsup_utils': { 'voxdet.networks.selfsup_utils.load_from_selfup_retina': ( 'networks/preload_from_selfsup.html#load_from_selfup_retina',
                                                                                                          'voxdet/networks/selfsup_utils.py')},
            'voxdet.networks.vitdet3d': { 'voxdet.networks.vitdet3d.SimpleFeaturePyramidNetwork': ( 'networks/vitdet3d.html#simplefeaturepyramidnetwork',
                                                                                                    'voxdet/networks/vitdet3d.py'),
                                          'voxdet.networks.vitdet3d.SimpleFeaturePyramidNetwork.__init__': ( 'networks/vitdet3d.html#simplefeaturepyramidnetwork.__init__',
                                                                                                             'voxdet/networks/vitdet3d.py'),
                                          'voxdet.networks.vitdet3d.SimpleFeaturePyramidNetwork.forward': ( 'networks/vitdet3d.html#simplefeaturepyramidnetwork.forward',
                                                                                                            'voxdet/networks/vitdet3d.py'),
                                          'voxdet.networks.vitdet3d.VitDet3dBackbonewithFPN3D': ( 'networks/vitdet3d.html#vitdet3dbackbonewithfpn3d',
                                                                                                  'voxdet/networks/vitdet3d.py'),
                                          'voxdet.networks.vitdet3d.VitDet3dBackbonewithFPN3D.__init__': ( 'networks/vitdet3d.html#vitdet3dbackbonewithfpn3d.__init__',
                                                                                                           'voxdet/networks/vitdet3d.py'),
                                          'voxdet.networks.vitdet3d.VitDet3dBackbonewithFPN3D.forward': ( 'networks/vitdet3d.html#vitdet3dbackbonewithfpn3d.forward',
                                                                                                          'voxdet/networks/vitdet3d.py'),
                                          'voxdet.networks.vitdet3d.conv3d_reduce': ( 'networks/vitdet3d.html#conv3d_reduce',
                                                                                      'voxdet/networks/vitdet3d.py')},
            'voxdet.retina_test': { 'voxdet.retina_test.add_label': ('model_test.html#add_label', 'voxdet/retina_test.py'),
                                    'voxdet.retina_test.convert2int': ('model_test.html#convert2int', 'voxdet/retina_test.py'),
                                    'voxdet.retina_test.draw_bbox': ('model_test.html#draw_bbox', 'voxdet/retina_test.py'),
                                    'voxdet.retina_test.draw_on_ct': ('model_test.html#draw_on_ct', 'voxdet/retina_test.py'),
                                    'voxdet.retina_test.load_img': ('model_test.html#load_img', 'voxdet/retina_test.py')},
            'voxdet.safe_ds': { 'voxdet.safe_ds.MyCollateFn': ('safetensors.html#mycollatefn', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.MyCollateFn.__call__': ('safetensors.html#mycollatefn.__call__', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.MyCollateFn.__init__': ('safetensors.html#mycollatefn.__init__', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.SafeTensorDL': ('safetensors.html#safetensordl', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.SafeTensorDL.__init__': ('safetensors.html#safetensordl.__init__', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.SafeTensorDL.load_ds': ('safetensors.html#safetensordl.load_ds', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.SafeTensorDL.train_dl': ('safetensors.html#safetensordl.train_dl', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.SafeTensorDL.val_dl': ('safetensors.html#safetensordl.val_dl', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.SafeTensorsDS': ('safetensors.html#safetensorsds', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.SafeTensorsDS.__getitem__': ( 'safetensors.html#safetensorsds.__getitem__',
                                                                              'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.SafeTensorsDS.__init__': ('safetensors.html#safetensorsds.__init__', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.SafeTensorsDS.__len__': ('safetensors.html#safetensorsds.__len__', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.get_scan_ids_from_txt': ('safetensors.html#get_scan_ids_from_txt', 'voxdet/safe_ds.py'),
                                'voxdet.safe_ds.get_scan_ids_inside_folder': ( 'safetensors.html#get_scan_ids_inside_folder',
                                                                               'voxdet/safe_ds.py')},
            'voxdet.tfsm.erase': { 'voxdet.tfsm.erase.RandomErase': ('tfsm/random_erase.html#randomerase', 'voxdet/tfsm/erase.py'),
                                   'voxdet.tfsm.erase.RandomErase.__init__': ( 'tfsm/random_erase.html#randomerase.__init__',
                                                                               'voxdet/tfsm/erase.py'),
                                   'voxdet.tfsm.erase.RandomErase.apply': ( 'tfsm/random_erase.html#randomerase.apply',
                                                                            'voxdet/tfsm/erase.py'),
                                   'voxdet.tfsm.erase._bbox3d_f2in': ('tfsm/random_erase.html#_bbox3d_f2in', 'voxdet/tfsm/erase.py'),
                                   'voxdet.tfsm.erase.get_patches': ('tfsm/random_erase.html#get_patches', 'voxdet/tfsm/erase.py'),
                                   'voxdet.tfsm.erase.masked_patches_dim': ( 'tfsm/random_erase.html#masked_patches_dim',
                                                                             'voxdet/tfsm/erase.py'),
                                   'voxdet.tfsm.erase.random_erase_3d': ('tfsm/random_erase.html#random_erase_3d', 'voxdet/tfsm/erase.py')},
            'voxdet.tfsm.flip': { 'voxdet.tfsm.flip.RandFlip': ('tfsm/random_flip.html#randflip', 'voxdet/tfsm/flip.py'),
                                  'voxdet.tfsm.flip.RandFlip.__init__': ('tfsm/random_flip.html#randflip.__init__', 'voxdet/tfsm/flip.py'),
                                  'voxdet.tfsm.flip.RandFlip.apply': ('tfsm/random_flip.html#randflip.apply', 'voxdet/tfsm/flip.py'),
                                  'voxdet.tfsm.flip.flip3d': ('tfsm/random_flip.html#flip3d', 'voxdet/tfsm/flip.py')},
            'voxdet.tfsm.med': { 'voxdet.tfsm.med.AddLungCache': ('tfsm/med.html#addlungcache', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.AddLungCache.__init__': ('tfsm/med.html#addlungcache.__init__', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.AddLungCache.apply': ('tfsm/med.html#addlungcache.apply', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.AddLungCache.reverse_apply': ( 'tfsm/med.html#addlungcache.reverse_apply',
                                                                                 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.CropLung': ('tfsm/med.html#croplung', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.CropLung.__init__': ('tfsm/med.html#croplung.__init__', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.CropLung.apply': ('tfsm/med.html#croplung.apply', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.CropLung.apply_bbox': ('tfsm/med.html#croplung.apply_bbox', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.CropLung.apply_image': ('tfsm/med.html#croplung.apply_image', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.CropLung.reverse_apply': ('tfsm/med.html#croplung.reverse_apply', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.CropLung.reverse_apply_bbox': ( 'tfsm/med.html#croplung.reverse_apply_bbox',
                                                                                  'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.Resample': ('tfsm/med.html#resample', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.Resample.__init__': ('tfsm/med.html#resample.__init__', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.Resample.apply': ('tfsm/med.html#resample.apply', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.Resample.apply_bbox': ('tfsm/med.html#resample.apply_bbox', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.Resample.apply_image': ('tfsm/med.html#resample.apply_image', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.Resample.reverse_apply': ('tfsm/med.html#resample.reverse_apply', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.WindowT': ('tfsm/med.html#windowt', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.WindowT.__init__': ('tfsm/med.html#windowt.__init__', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.WindowT._default_windows': ( 'tfsm/med.html#windowt._default_windows',
                                                                               'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.WindowT.apply': ('tfsm/med.html#windowt.apply', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.WindowT.apply_image': ('tfsm/med.html#windowt.apply_image', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.WindowT.reverse_apply': ('tfsm/med.html#windowt.reverse_apply', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.get_bbox_from_mask': ('tfsm/med.html#get_bbox_from_mask', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.resample_box': ('tfsm/med.html#resample_box', 'voxdet/tfsm/med.py'),
                                 'voxdet.tfsm.med.resize_factor': ('tfsm/med.html#resize_factor', 'voxdet/tfsm/med.py')},
            'voxdet.tfsm.mip': { 'voxdet.tfsm.mip.MIP': ('tfsm/mip.html#mip', 'voxdet/tfsm/mip.py'),
                                 'voxdet.tfsm.mip.MIP.__init__': ('tfsm/mip.html#mip.__init__', 'voxdet/tfsm/mip.py'),
                                 'voxdet.tfsm.mip.MIP.apply': ('tfsm/mip.html#mip.apply', 'voxdet/tfsm/mip.py'),
                                 'voxdet.tfsm.mip.MIP.apply_image': ('tfsm/mip.html#mip.apply_image', 'voxdet/tfsm/mip.py'),
                                 'voxdet.tfsm.mip.MIP.reverse_apply': ('tfsm/mip.html#mip.reverse_apply', 'voxdet/tfsm/mip.py'),
                                 'voxdet.tfsm.mip.get_mip_array': ('tfsm/mip.html#get_mip_array', 'voxdet/tfsm/mip.py')},
            'voxdet.tfsm.scan_crop': { 'voxdet.tfsm.scan_crop.RandSliceCrop': ( 'tfsm/scan_crop.html#randslicecrop',
                                                                                'voxdet/tfsm/scan_crop.py'),
                                       'voxdet.tfsm.scan_crop.RandSliceCrop.__init__': ( 'tfsm/scan_crop.html#randslicecrop.__init__',
                                                                                         'voxdet/tfsm/scan_crop.py'),
                                       'voxdet.tfsm.scan_crop.RandSliceCrop.apply': ( 'tfsm/scan_crop.html#randslicecrop.apply',
                                                                                      'voxdet/tfsm/scan_crop.py'),
                                       'voxdet.tfsm.scan_crop.SliceCrop': ('tfsm/scan_crop.html#slicecrop', 'voxdet/tfsm/scan_crop.py'),
                                       'voxdet.tfsm.scan_crop.SliceCrop.__init__': ( 'tfsm/scan_crop.html#slicecrop.__init__',
                                                                                     'voxdet/tfsm/scan_crop.py'),
                                       'voxdet.tfsm.scan_crop.SliceCrop.apply': ( 'tfsm/scan_crop.html#slicecrop.apply',
                                                                                  'voxdet/tfsm/scan_crop.py'),
                                       'voxdet.tfsm.scan_crop.assymetric_z_pad': ( 'tfsm/scan_crop.html#assymetric_z_pad',
                                                                                   'voxdet/tfsm/scan_crop.py')},
            'voxdet.tfsm.standard': { 'voxdet.tfsm.standard.BaseT': ('tfsm/standardt.html#baset', 'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.BaseT.__init__': ( 'tfsm/standardt.html#baset.__init__',
                                                                               'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.BaseT.apply': ('tfsm/standardt.html#baset.apply', 'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.BaseT.forward': ( 'tfsm/standardt.html#baset.forward',
                                                                              'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.StandardT': ('tfsm/standardt.html#standardt', 'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.StandardT.__init__': ( 'tfsm/standardt.html#standardt.__init__',
                                                                                   'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.StandardT._check_bbox_mode': ( 'tfsm/standardt.html#standardt._check_bbox_mode',
                                                                                           'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.StandardT._check_img_mode': ( 'tfsm/standardt.html#standardt._check_img_mode',
                                                                                          'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.StandardT.apply': ( 'tfsm/standardt.html#standardt.apply',
                                                                                'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.StandardT.apply_bbox': ( 'tfsm/standardt.html#standardt.apply_bbox',
                                                                                     'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.StandardT.apply_img': ( 'tfsm/standardt.html#standardt.apply_img',
                                                                                    'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.StandardT.forward': ( 'tfsm/standardt.html#standardt.forward',
                                                                                  'voxdet/tfsm/standard.py'),
                                      'voxdet.tfsm.standard.StandardT.reverse_apply': ( 'tfsm/standardt.html#standardt.reverse_apply',
                                                                                        'voxdet/tfsm/standard.py')},
            'voxdet.tfsm.utils': { 'voxdet.tfsm.utils.chwd_2_corner': ('tfsm/transform_utils.html#chwd_2_corner', 'voxdet/tfsm/utils.py'),
                                   'voxdet.tfsm.utils.corner_2_chwd': ('tfsm/transform_utils.html#corner_2_chwd', 'voxdet/tfsm/utils.py')},
            'voxdet.tfsm.voxt': { 'voxdet.tfsm.voxt.ApplyWindowsChannelWise': ( 'tfsm/voxt.html#applywindowschannelwise',
                                                                                'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.ApplyWindowsChannelWise.__init__': ( 'tfsm/voxt.html#applywindowschannelwise.__init__',
                                                                                         'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.ApplyWindowsChannelWise.apply': ( 'tfsm/voxt.html#applywindowschannelwise.apply',
                                                                                      'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.ApplyWindowsChannelWise.apply_image': ( 'tfsm/voxt.html#applywindowschannelwise.apply_image',
                                                                                            'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.ApplyWindowsChannelWise.reverse_apply': ( 'tfsm/voxt.html#applywindowschannelwise.reverse_apply',
                                                                                              'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Norm3d': ('tfsm/voxt.html#norm3d', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Norm3d.__init__': ('tfsm/voxt.html#norm3d.__init__', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Norm3d.apply': ('tfsm/voxt.html#norm3d.apply', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Norm3d.apply_image': ('tfsm/voxt.html#norm3d.apply_image', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Norm3d.reverse_apply': ('tfsm/voxt.html#norm3d.reverse_apply', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.PadIfNeeded': ('tfsm/voxt.html#padifneeded', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.PadIfNeeded.__init__': ('tfsm/voxt.html#padifneeded.__init__', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.PadIfNeeded.apply': ('tfsm/voxt.html#padifneeded.apply', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.PadIfNeeded.reverse_apply': ( 'tfsm/voxt.html#padifneeded.reverse_apply',
                                                                                  'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.RandPosCrop': ('tfsm/voxt.html#randposcrop', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.RandPosCrop.__init__': ('tfsm/voxt.html#randposcrop.__init__', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.RandPosCrop.apply': ('tfsm/voxt.html#randposcrop.apply', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.ToNumpy': ('tfsm/voxt.html#tonumpy', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.ToNumpy.__init__': ('tfsm/voxt.html#tonumpy.__init__', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.ToNumpy.apply': ('tfsm/voxt.html#tonumpy.apply', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.ToNumpy.reverse_apply': ('tfsm/voxt.html#tonumpy.reverse_apply', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Transpose': ('tfsm/voxt.html#transpose', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Transpose.__init__': ('tfsm/voxt.html#transpose.__init__', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Transpose.apply': ('tfsm/voxt.html#transpose.apply', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Transpose.apply_bbox': ('tfsm/voxt.html#transpose.apply_bbox', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Transpose.apply_img': ('tfsm/voxt.html#transpose.apply_img', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Transpose.reverse_apply': ( 'tfsm/voxt.html#transpose.reverse_apply',
                                                                                'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.Transpose.reverse_order': ( 'tfsm/voxt.html#transpose.reverse_order',
                                                                                'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.calculate_occupancy': ('tfsm/voxt.html#calculate_occupancy', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.clip_2_img': ('tfsm/voxt.html#clip_2_img', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.crop_bbox': ('tfsm/voxt.html#crop_bbox', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.generate_end_biased_distribution': ( 'tfsm/voxt.html#generate_end_biased_distribution',
                                                                                         'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.get_valid_centers': ('tfsm/voxt.html#get_valid_centers', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.pad3d': ('tfsm/voxt.html#pad3d', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.pad3d_by_div': ('tfsm/voxt.html#pad3d_by_div', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.pad3d_by_rsize': ('tfsm/voxt.html#pad3d_by_rsize', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.random_crop': ('tfsm/voxt.html#random_crop', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.random_crop_img': ('tfsm/voxt.html#random_crop_img', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.random_crop_multi': ('tfsm/voxt.html#random_crop_multi', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.remove_out_of_bounds_bboxes': ( 'tfsm/voxt.html#remove_out_of_bounds_bboxes',
                                                                                    'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.select_min_overlap_cuboids': ( 'tfsm/voxt.html#select_min_overlap_cuboids',
                                                                                   'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.vol_intersect': ('tfsm/voxt.html#vol_intersect', 'voxdet/tfsm/voxt.py'),
                                  'voxdet.tfsm.voxt.volume': ('tfsm/voxt.html#volume', 'voxdet/tfsm/voxt.py')},
            'voxdet.trainer': {},
            'voxdet.utils': { 'voxdet.utils.clean_state_dict': ('utils.html#clean_state_dict', 'voxdet/utils.py'),
                              'voxdet.utils.image_grid': ('utils.html#image_grid', 'voxdet/utils.py'),
                              'voxdet.utils.import_module': ('utils.html#import_module', 'voxdet/utils.py'),
                              'voxdet.utils.load_deeplake_nodule_data': ('utils.html#load_deeplake_nodule_data', 'voxdet/utils.py'),
                              'voxdet.utils.load_sitk_img': ('utils.html#load_sitk_img', 'voxdet/utils.py'),
                              'voxdet.utils.locate_cls': ('utils.html#locate_cls', 'voxdet/utils.py'),
                              'voxdet.utils.mmcv_config_to_omegaconf': ('utils.html#mmcv_config_to_omegaconf', 'voxdet/utils.py'),
                              'voxdet.utils.thumbnail': ('utils.html#thumbnail', 'voxdet/utils.py'),
                              'voxdet.utils.vis': ('utils.html#vis', 'voxdet/utils.py'),
                              'voxdet.utils.windowing': ('utils.html#windowing', 'voxdet/utils.py')}}}
