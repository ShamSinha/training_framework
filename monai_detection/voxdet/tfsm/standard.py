# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/tfsm/01_standardt.ipynb.

# %% auto 0
__all__ = ['BaseT', 'StandardT']

# %% ../../nbs/tfsm/01_standardt.ipynb 2
import torch 
import fastcore.all as fc
from typing import Union, List
from .utils import chwd_2_corner

# %% ../../nbs/tfsm/01_standardt.ipynb 4
class BaseT(torch.nn.Module):
    def __init__(self): super().__init__()
    def forward(self, img:Union[List[dict], dict]):
        if isinstance(img, list): return [self.apply(i) for i in img] 
        else: return self.apply(img)
    def apply(self, img:dict): raise NotImplementedError

# %% ../../nbs/tfsm/01_standardt.ipynb 5
class StandardT(BaseT):
    def __init__(self, src_mode:str, img_src_mode: str): 
        # converts bbox to zyxzyx format and img_src_mode to zyx format
        fc.store_attr() 
        super().__init__()
        self._check_bbox_mode()
        self._check_img_mode()
    
    __repr__ = fc.basic_repr(flds="src_mode, img_src_mode")

    def _check_bbox_mode(self):
        if self.src_mode not in ["yxzhwd"]: raise NotImplementedError(f"src_mode {self.src_mode} not implemented")
        
    def _check_img_mode(self):
        if self.img_src_mode not in ["zyx", "xyz"]: raise NotImplementedError(f"img_src_mode {self.img_src_mode} not implemented")
        
    def forward(self, img:Union[List[dict], dict]):
        if isinstance(img, list): return [self.apply(i) for i in img] 
        else: return self.apply(img)
    
    def apply(self, img: dict):
        assert "images" in img.keys(), "images are not present."
        nimg = {}
        nimg["images"] = self.apply_img(img["images"].copy())
        if "boxes" in img.keys(): nimg["boxes"] = self.apply_bbox(img["boxes"].copy())
        for i in img.keys(): 
            if i not in nimg.keys(): nimg[i] = img[i]
        return nimg
    
    def apply_img(self, img):
        out = img.copy()
        if self.img_src_mode == "zyx": return out 
        if self.img_src_mode == "xyz": return out.transpose((2, 1, 0))
        raise NotImplementedError(f"img_src_mode: {self.img_src_mode}, img_dst_mode: {self.img_dst_mode} not implemented")
    
    
    def apply_bbox(self, bbox):
        #dest mode is always xyzxyz
        if self.src_mode == "yxzhwd": return chwd_2_corner(bbox)[:, [2, 0, 1, 5, 3, 4]]
        raise NotImplementedError(f"src_mode: {self.src_mode}, dst_mode: {self.dst_mode} not implemented")
    
    #TODO: we should Ideally reverse this to original dimensions. 
    def reverse_apply(self, img:dict): return img 
