# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/tfsm/09_scan_crop.ipynb.

# %% auto 0
__all__ = ['assymetric_z_pad', 'SliceCrop', 'RandSliceCrop']

# %% ../../nbs/tfsm/09_scan_crop.ipynb 2
import numpy as np 
import fastcore.all as fc

from typing import Optional
from .voxt import RandPosCrop, pad3d
from .standard import BaseT


# %% ../../nbs/tfsm/09_scan_crop.ipynb 24
def assymetric_z_pad(img, bbox, dim=96):
    imgshape = img.shape[0] if len(img.shape) == 3 else img.shape[1]
    assert imgshape < dim, f"img.shape[0] should be less than dim. \
                                 should have {imgshape}, got {dim}"
    left_pad = np.random.randint(dim-imgshape)
    img, bbox = pad3d(img, bbox, pad=(left_pad, 0, 0), side="left")
    imgshape = img.shape[0] if len(img.shape) == 3 else img.shape[1]
    img, bbox = pad3d(img, bbox, pad=(dim-imgshape, 0, 0), side="right")
    return img, bbox

# %% ../../nbs/tfsm/09_scan_crop.ipynb 30
class SliceCrop(BaseT):
    def __init__(self, min_slices=15, max_slices: Optional[int]=None, multi_view: bool=False):
        """both min and max slices are integers"""
        fc.store_attr()
        super().__init__()
    __repr__ = fc.basic_repr("min_slices, max_slices, multi_view")
    
    def apply(self, img: dict):
        assert "images" in img.keys(), f"images not present in input [img]. Only: {img.keys()} present"
        if self.multi_view:
            _, zs, ys, xs = img["images"].shape
        else:
            zs, ys, xs = img["images"].shape
        slices = np.random.randint(self.min_slices, self.max_slices if self.max_slices is not None else zs)
        func = RandPosCrop(crop_size=(slices, ys, xs), multi_view=self.multi_view)
        img = func(img)
        
        ##
        fimg = img["images"].copy()
        boxes = img["boxes"].copy() if "boxes" in img.keys() else None 
        
        nimg = {}
        if boxes is not None: nimg["images"], nimg["boxes"] = assymetric_z_pad(fimg, boxes, dim=zs)
        else: nimg["images"] = assymetric_z_pad(fimg, boxes, dim=zs)
        for i in img.keys():
            if i not in nimg.keys(): nimg[i] = img[i]
        return nimg

# %% ../../nbs/tfsm/09_scan_crop.ipynb 32
class RandSliceCrop(BaseT):
    def __init__(self, min_slices=15, max_slices: Optional[int]=None, prob=0.9, multi_view: bool=False):
        """both min and max slices are integers"""
        fc.store_attr()
        super().__init__()
        self.func = SliceCrop(self.min_slices, self.max_slices, multi_view=self.multi_view)
    
    __repr__ = fc.basic_repr("min_slices, max_slices, prob")
    
    def apply(self, img:dict):
        if np.random.sample(1)[0]<=self.prob: return self.func(img)
        else: return img 
