# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_model_test.ipynb.

# %% auto 0
__all__ = ['load_img', 'convert2int', 'draw_bbox', 'add_label', 'draw_on_ct']

# %% ../nbs/07_model_test.ipynb 3
import numpy as np
import cv2
import SimpleITK as sitk 
from .tfsm.voxt import clip_2_img
from .utils import hu_to_lung_window

# %% ../nbs/07_model_test.ipynb 8
def load_img(scan_loc, window=True):
    img = sitk.ReadImage(scan_loc.as_posix())
    array = sitk.GetArrayFromImage(img)
    if window: return np.uint8(hu_to_lung_window(array)*255)
    return array

# %% ../nbs/07_model_test.ipynb 20
def convert2int(boxes, margin=None, img_shape=None):
    boxes = boxes.copy()
    boxes[:, :3] = np.floor(boxes[:, :3])
    boxes[:, 3:] = np.ceil(boxes[:, 3:])
    boxes = boxes.astype(int)
    if margin is not None:boxes = boxes + np.asarray(margin).reshape(1, -1).repeat(boxes.shape[0], axis=0)
    if img_shape is not None: boxes = clip_2_img(boxes, img_shape)
    return boxes

# %% ../nbs/07_model_test.ipynb 21
def draw_bbox(img, bbox, bbox_color: tuple=(255, 0, 0), thickness: int=2, overlay: bool=False, alpha: float=0.5):
    #bbox is is xyxy format
    output = img.copy()
    thickness = -1 if overlay else thickness
    output = cv2.rectangle(output, (bbox[0], bbox[1]), (bbox[2], bbox[3]), bbox_color, thickness)
    if overlay: 
        overlay = img.copy()
        cv2.addWeighted(overlay, alpha, output, 1 - alpha, 0, output)
    return output

# %% ../nbs/07_model_test.ipynb 22
def add_label(img, bbox, label, draw_bg=True, text_color=(255, 0, 0), text_bg_color=(255, 255, 255)):
    text_width = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)[0][0]
    tip = +30 if bbox[1]-30<0 else -30 
    label_bg = [bbox[0], bbox[1], bbox[0] + text_width, bbox[1] + tip]
    output = img.copy()
    if draw_bg:cv2.rectangle(output, (label_bg[0], label_bg[1]), (label_bg[2] + 5, label_bg[3]), text_bg_color, -1)
    cv2.putText(output, label, (bbox[0] + 5, bbox[1] - 5 + (30 if tip==30 else 0)), cv2.FONT_HERSHEY_SIMPLEX, 1, text_color, 2)
    return output

# %% ../nbs/07_model_test.ipynb 23
def draw_on_ct(img, boxes, color=(255, 0, 0)):
    dimg = img.copy()
    for box in boxes:
        z1, y1, x1, z2, y2, x2 = box
        if z1 == z2: z2 = z2+1
        for z in range(z1, z2):
            img = dimg[z]
            img = draw_bbox(img, (x1, y1, x2, y2), bbox_color=color)
            dimg[z] = img
    return dimg 
