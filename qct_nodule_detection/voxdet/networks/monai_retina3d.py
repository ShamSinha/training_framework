# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/networks/01_retinanet.ipynb.

# %% auto 0
__all__ = ['retina_detector']

# %% ../../nbs/networks/01_retinanet.ipynb 1
import monai
from monai.apps.detection.networks.retinanet_detector import RetinaNetDetector
from monai.apps.detection.networks.retinanet_network import RetinaNet

# %% ../../nbs/networks/01_retinanet.ipynb 19
def _get_retina_model(cfg):
    
    fe = cfg.fe
    anchor_generator = cfg.anchor_params
    classes = cfg.classes
    
    fpn_params_cfg = cfg.fpn_params if 'fpn_params' in cfg else None
    spatial_dims = cfg.model_cfg.spatial_dims if 'spatial_dims' in cfg.model_cfg else 3
    
    if hasattr(fe.body , "embeddings") : 
        if hasattr(fe.body.embeddings, "projection"):
            size_divisible = tuple(2 * s * 2 ** max([1,2]) for s in fe.body.embeddings.projection.stride)
        elif hasattr(fe.body.embeddings, "patch_embeddings"):
            size_divisible = tuple(2 * s * 2 ** max([1,2]) for s in fe.body.embeddings.patch_embeddings.stride)
        else:
            raise NotImplementedError("fix this")

    elif hasattr(fe.body, "conv1") :
        size_divisible = tuple(2 * s * 2 ** max(fpn_params_cfg.returned_layers) for s in fe.body.conv1.stride)
    else:
        size_divisible = tuple(2 * s * 2 ** max(fpn_params_cfg.returned_layers) for s in fe.body.base[0].stride)
            
    num_anchors = anchor_generator.num_anchors_per_location()[0]
    network = RetinaNet(
        spatial_dims = spatial_dims,
        num_classes=len(classes),
        num_anchors=num_anchors,
        feature_extractor=fe,
        size_divisible=size_divisible,
    )
    return network, anchor_generator


# %% ../../nbs/networks/01_retinanet.ipynb 35
def retina_detector(cfg):
    network, anchor_generator = _get_retina_model(cfg)
    model = RetinaNetDetector(network, anchor_generator)
    model.set_sliding_window_inferer(**cfg.infer_cfg, sw_device=None, device= None, progress=False)

    if not hasattr(cfg, "train_cfg"): return model 
    
    if hasattr(cfg.train_cfg, "matcher"): 
        matcher = cfg.train_cfg.matcher
        getattr(model, matcher["name"])(**matcher["attr"])
    
    if hasattr(cfg.train_cfg, "sampler"): 
        sampler = cfg.train_cfg.sampler
        getattr(model, sampler["name"])(**sampler["attr"])
    
    model.set_box_selector_parameters(nms_thresh=0.1)
    
    if hasattr(cfg.train_cfg, "reg_loss") and (cfg.train_cfg.reg_loss is not None):
        reg_loss = cfg.train_cfg.reg_loss
        getattr(model, "set_box_regression_loss")(**reg_loss)

    if hasattr(cfg.train_cfg, "cls_loss") and (cfg.train_cfg.cls_loss is not None):
        cls_loss = cfg.train_cfg.cls_loss
        getattr(model, "set_cls_loss")(**cls_loss)

    return model
