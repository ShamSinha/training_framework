# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/networks/07_preload_from_selfsup.ipynb.

# %% auto 0
__all__ = ['load_from_selfup_retina']

# %% ../../nbs/networks/07_preload_from_selfsup.ipynb 3
import torch 
from loguru import logger 

# %% ../../nbs/networks/07_preload_from_selfsup.ipynb 21
def load_from_selfup_retina(seflsup_weight_loc, model):
    weights = torch.load(seflsup_weight_loc)
    if "state_dict" in weights.keys(): weights = weights["state_dict"]
    
    model_dict = model.network.feature_extractor.body.state_dict()
    network_keys = model_dict.keys()
    
    final_weights = {}
    for k in network_keys:
        if k not in weights.keys():
            logger.warn(f"{k} not in weights")
        if k not in model_dict.keys():
            logger.warn(f"{k} not in model_dict")
        m = weights[k]
        n = model_dict[k]
        logger.info(f"mapping weights {k}-{m.shape}")
        if m.shape == n.shape:
            final_weights[k] = m
            continue
        logger.info(f"resizing weights {k} from {m.shape} to {n.shape}")
        new_m = torch.nn.functional.interpolate(
                m, size=n.shape[2:], mode="trilinear", align_corners=False
            )
        final_weights[k] = new_m
    return final_weights
